/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SCREEN1VIEWBASE_HPP
#define SCREEN1VIEWBASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/ScalableImage.hpp>
#include <touchgfx/widgets/Gauge.hpp>
#include <touchgfx/widgets/ToggleButton.hpp>
#include <touchgfx/widgets/BoxWithBorder.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/canvas/Circle.hpp>
#include <touchgfx/widgets/canvas/PainterRGB565.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/widgets/canvas/Shape.hpp>

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase();
    virtual void setupScreen();

    /*
     * Virtual Action Handlers
     */
    virtual void onOffClicked()
    {
        // Override and implement this function in Screen1
    }
    virtual void changeView()
    {
        // Override and implement this function in Screen1
    }
    virtual void secureOnOff()
    {
        // Override and implement this function in Screen1
    }

protected:
    FrontendApplication& application() {
        return *static_cast<FrontendApplication*>(touchgfx::Application::getInstance());
    }

    /*
     * Member Declarations
     */
    touchgfx::Box __background;
    touchgfx::ScalableImage scalableImage1;
    touchgfx::Gauge gauge1;
    touchgfx::ToggleButton toggleButton1;
    touchgfx::BoxWithBorder boxWithBorder2;
    touchgfx::BoxWithBorder boxWithBorder1;
    touchgfx::TextArea statusText;
    touchgfx::TextArea powerText;
    touchgfx::TextArea staticText2;
    touchgfx::TextArea staticText3;
    touchgfx::Circle circleStatus;
    touchgfx::PainterRGB565 circleStatusPainter;
    touchgfx::Circle circlePower;
    touchgfx::PainterRGB565 circlePowerPainter;
    touchgfx::TextArea warningText;
    touchgfx::TextAreaWithOneWildcard textArea1;
    touchgfx::TextAreaWithOneWildcard textBigPress;
    touchgfx::TextAreaWithOneWildcard pinVolt;
    touchgfx::TextAreaWithOneWildcard statVolt;
    touchgfx::TextAreaWithOneWildcard realVolt;
    touchgfx::TextAreaWithOneWildcard powerVolt;
    touchgfx::TextArea staticText1;
    touchgfx::ButtonWithLabel viewButton;
    touchgfx::ButtonWithLabel viewButton_1;
    touchgfx::Shape<3> shape_up;
    touchgfx::PainterRGB565 shape_upPainter;
    touchgfx::Shape<3> shape_down;
    touchgfx::PainterRGB565 shape_downPainter;
    touchgfx::TextArea noPowerTxt;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEXTAREA1_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textArea1Buffer[TEXTAREA1_SIZE];
    static const uint16_t TEXTBIGPRESS_SIZE = 20;
    touchgfx::Unicode::UnicodeChar textBigPressBuffer[TEXTBIGPRESS_SIZE];
    static const uint16_t PINVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar pinVoltBuffer[PINVOLT_SIZE];
    static const uint16_t STATVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar statVoltBuffer[STATVOLT_SIZE];
    static const uint16_t REALVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar realVoltBuffer[REALVOLT_SIZE];
    static const uint16_t POWERVOLT_SIZE = 10;
    touchgfx::Unicode::UnicodeChar powerVoltBuffer[POWERVOLT_SIZE];

private:

    /*
     * Canvas Buffer Size
     */
    static const uint32_t CANVAS_BUFFER_SIZE = 7200;
    uint8_t canvasBuffer[CANVAS_BUFFER_SIZE];

    /*
     * Callback Declarations
     */
    touchgfx::Callback<Screen1ViewBase, const touchgfx::AbstractButton&> buttonCallback;

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);

};

#endif // SCREEN1VIEWBASE_HPP
